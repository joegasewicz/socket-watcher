/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package socketWatcher

import java.io.BufferedReader
import java.io.InputStreamReader
import java.lang.Error

val networkCons = mutableListOf<String>()
var connData: MutableMap<String, List<String>> = mutableMapOf()

fun readNetworkCons (connections: MutableList<String>): MutableList<String> {
    val process = Runtime.getRuntime().exec("lsof -i")
    val reader = BufferedReader(InputStreamReader(process.inputStream))
    var line: String
    while ((reader.readLine()) != null) {
        line = reader.readLine()
        connections.add(line)
    }
    return connections
}

fun createConnData(connections: MutableList<String>, connData: MutableMap<String, List<String>>): MutableMap<String, List<String>> {
    for (conn in connections) {
        val connLine = conn.split("   ")
        val key: String = connLine[0]
        if (key.split(" ").size > 1) {
            if (!key.contains("Brave")) {
                continue
            }
        }
        // Clean any key names
        var cleanedKey: String = ""
        cleanedKey = when(true) {
            key.contains("Brave") -> "Brave"
            else -> key
        }
        connData[cleanedKey] = connLine
    }
    return connData
}

fun getOutboundIPFromConnList(connList: MutableList<String>): MutableList<String>? {
    val ipAndConnType: List<String>
    val socket: String
    try {
        var end = connList.last()
        socket = when(true) {
            end.contains("TCP") -> "TCP"
            end.contains("UDP") -> "UDP"
            else -> "???"
        }
        if (!end.contains("->")) {
            return null
        }
        end = end.split("->")[1]
        if (!end.contains(" ")) {
            return null
        }
        ipAndConnType = end.split(" ") as MutableList<String>
        ipAndConnType.add(socket)
        return ipAndConnType
    } catch (err: Error) {
        println(err)
    }
    return null
}

fun main(args: Array<String>) {
    val connections = readNetworkCons(networkCons)
    val connData = createConnData(connections, connData)
    println("======================================")
    println("======= Network Connections ==========")
    println("======================================")
    connData.forEach {
        (k, v) ->
        val result = getOutboundIPFromConnList(v as MutableList<String>)
        if (!result.isNullOrEmpty()) {
            var (ip, type, socket) = result
            println("TYPE: $type | IP: $ip | SOCKET $socket")
        }

    }
}
